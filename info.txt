Clone repository from a specific branch:
  git clone -b branch_name --single-branch https://repository.git

Update Ubuntu:
  sudo apt-get update

Install pip on Ubuntu:
  sudo apt-get install python3-pip

Install a virtual environment in Python on Ubuntu:
  sudo apt install python3-virtualenv

Create a virtual environment in Python on Ubuntu:
  virtualenv venv

Activate the virtual Environment:
  source venv/bin/activate

Deactivate the virtual Environment:
  deactivate

Install packages in the virtual environment:
pip install openai --upgrade
  pip install flask requests python-dotenv
  pip install bs4

Requirements.txt:
  openai --upgrade
  flask
  requests
  python-dotenv
  bs4

Install packages from requirements.txt:
  pip install -r requirements.txt

Create a .env with:
  OPEN_AI_KEY="<your OPENAI API key here>"
  BRAVE_API_KEY="<your Brave API key here>"
  CHAT_APP_SECRET_KEY=“<your APP SECRET KEY key here>"

Run chatbot from command line:
  python3 run.py

Git push to a new branch:
  git checkout -b new-branch-name
  git add .
  git commit -m "Description of changes"
  git push origin new-branch-name

Install Nginx:
  sudo apt-get update
  sudo apt-get install nginx

Create a new Nginx configuration file:
  sudo vim /etc/nginx/sites-available/chatbot

Insert this content on it:
server {
listen 80;
server_name “<Replace with IP_PUBLIC>”;
location / {
proxy_pass http://127.0.0.1:5000;
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
}
}

Create a symbolic link to the sites-enabled directory:
  sudo ln -s /etc/nginx/sites-available/chatbot /etc/nginx/sites-enabled

Test the configuration:
  sudo nginx -t

Restart Nginx:
  sudo systemctl restart nginx

Keep chatbot running on the background and after log out:
  nohup python3 run.py &

Check running processes:
  ps aux | grep run.py
  ps aux | grep gunicorn

Terminate processes:
  kill “<PROCESS NUMBER ID>”

Use a service like No-IP (https://www.noip.com/) to create a hostname:
  Create Hostname.
  Choose a hostname.
  Insert the IPv4 Public Address.

Access the Nginx configuration file again:
  sudo vim /etc/nginx/sites-available/chatbot

Modify the server_name line to include the subdomain:
  server_name 34.239.138.129 monchatbot.ddns.net; # Include subdomain here

Install Docker:
  sudo apt-get update
  sudo apt-get install docker.io
  sudo systemctl start docker
  sudo systemctl enable docker

Run Jenkins in Docker:
  sudo docker pull jenkins/jenkins:lts
  sudo docker run -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts
*Insert initial admin password for Jenkins.

Restart Jenkins if stopped:
  sudo docker restart lucid_satoshi

Create a Pipeline:

Crate a Jenkinsfile:

Configure HTTPS:
  sudo apt-get update
  sudo apt-get install software-properties-common
  sudo add-apt-repository universe
  sudo add-apt-repository ppa:certbot/certbot
  sudo apt-get update
  sudo apt-get install certbot python3-certbot-nginx

Get a certificate using Certbot:
  sudo certbot --nginx -d your-domain.com # Replace with your domain

Follow the Prompts:
  Certbot will guide you through the setup. Choose the options that suit your needs.

Configure HTTPS in Nginx:
  Certbot should make the necessary adjustments to your Nginx configuration, including adding the required directives for SSL.

Restart Nginx:
  sudo systemctl reload nginx

Automatic Renewal:
  Certbot certificates are valid for 90 days, but you can set up automatic renewal with a cron job:
  sudo crontab -e
  0 2 * * * /usr/bin/certbot renew --quiet

Information about the original chatbot and its creator:
https://codeconfessions.substack.com/p/creating-chatgpt-plugins-using-the#:~:text=The%20function%20call%20feature%20of%20the%20ChatGPT%20API%20allows%20users,help%20to%20perform%20its%20task.

Original chatbot GitHub repository:
https://github.com/abhinav-upadhyay/chatgpt_plugins